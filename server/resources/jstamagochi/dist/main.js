/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("const sleepBtn = document.querySelector(\"#action-sleep\");\r\nconst feedBtn = document.querySelector(\"#action-feed\");\r\nconst playBtn = document.querySelector(\"#action-play\");\r\nconst startBtn = document.querySelector(\"#action-menu-start-game\");\r\nconst settingsBtn = document.querySelector(\"#action-menu-settings\");\r\nconst settingsBackBtn = document.querySelector(\"#action-settings-back\");\r\nconst difHardBtn = document.querySelector(\"#action-settings-difficulty-hard\");\r\nconst difNormalBtn = document.querySelector(\r\n  \"#action-settings-difficulty-normal\"\r\n);\r\nconst difEasyBtn = document.querySelector(\"#action-settings-difficulty-easy\");\r\nconst nightModeOffBtn = document.querySelector(\"#nightmode-off\");\r\nconst nightModeOnBtn = document.querySelector(\"#nightmode-on\");\r\n\r\nconst sleepHp = document.querySelector(\"#sleep-hp\");\r\nconst hungerHp = document.querySelector(\"#hunger-hp\");\r\nconst playHp = document.querySelector(\"#play-hp\");\r\nconst energyHp = document.querySelector(\"#energy-hp\");\r\nconst skillLevelHp = document.querySelector(\"#skillLevel-hp\");\r\nconst scoreBar = document.querySelector(\"#score\");\r\nconst maxSleep = 300;\r\nconst maxHunger = 300;\r\nconst maxPlay = 300;\r\nconst maxSkillLevel = 300;\r\nconst maxEnergy = 300;\r\n\r\nlet day = 20;\r\n\r\nfunction Tamagotchi() {\r\n  this.sleep = maxSleep;\r\n  this.hunger = maxHunger;\r\n  this.play = maxPlay;\r\n  this.energy = maxEnergy;\r\n  this.skillLevel = maxSkillLevel;\r\n}\r\n\r\nTamagotchi.prototype.actionSleep = function () {\r\n  this.sleep += 40 / (day * 2);\r\n  this.energy += 40 / (day * 2);\r\n};\r\n\r\nTamagotchi.prototype.actionEat = function () {\r\n  this.hunger += 120 / (day * 2);\r\n};\r\n\r\nTamagotchi.prototype.actionPlay = function () {\r\n  this.play += 80 / (day * 2);\r\n  this.skillLevel += 40 / (day * 2);\r\n};\r\n\r\nTamagotchi.prototype.tick = function () {\r\n  this.sleep--;\r\n  this.hunger -= 3;\r\n  this.play -= 2;\r\n};\r\n\r\nlet tmgch = new Tamagotchi();\r\nlet sleepHpCount;\r\nlet hungerHpCount;\r\nlet playHpCount;\r\nlet energyHpCount;\r\nlet skillLevelHpCount;\r\nlet score = 0;\r\n\r\nsleepBtn.addEventListener(\"click\", function () {\r\n  tmgch.actionSleep();\r\n});\r\n\r\nfeedBtn.addEventListener(\"click\", function () {\r\n  tmgch.actionEat();\r\n});\r\n\r\nplayBtn.addEventListener(\"click\", function () {\r\n  tmgch.actionPlay();\r\n});\r\n\r\nstartBtn.addEventListener(\"click\", function () {\r\n  startGame();\r\n});\r\n\r\nsettingsBtn.addEventListener(\"click\", function () {\r\n  settingsMenu();\r\n});\r\n\r\ndifHardBtn.addEventListener(\"click\", function () {\r\n  day = 5;\r\n  document.querySelector(\"#difSet\").innerHTML = \"Hard\";\r\n});\r\n\r\ndifNormalBtn.addEventListener(\"click\", function () {\r\n  day = 20;\r\n  document.querySelector(\"#difSet\").innerHTML = \"Normal\";\r\n});\r\n\r\ndifEasyBtn.addEventListener(\"click\", function () {\r\n  day = 40;\r\n  document.querySelector(\"#difSet\").innerHTML = \"Easy\";\r\n});\r\n\r\nsettingsBackBtn.addEventListener(\"click\", function () {\r\n  MainMenu();\r\n});\r\n\r\nnightModeOffBtn.addEventListener(\"click\", function () {\r\n  nightModeOff();\r\n});\r\n\r\nnightModeOnBtn.addEventListener(\"click\", function () {\r\n  nightModeOn();\r\n});\r\n\r\nfunction nightModeOn() {\r\n  document.querySelector(\"body\").classList.add(\"nightmode-on\");\r\n  document.querySelector(\"#nightmode\").innerHTML = \"on\";\r\n}\r\n\r\nfunction nightModeOff() {\r\n  document.querySelector(\"body\").classList.remove(\"nightmode-on\");\r\n  document.querySelector(\"#nightmode\").innerHTML = \"off\";\r\n}\r\n\r\ndocument.querySelector(\".game-screen\").classList.toggle(\"hide\");\r\ndocument.querySelector(\".menu-screen-settings\").classList.toggle(\"hide\");\r\n\r\nfunction MainMenu() {\r\n  document.querySelector(\".menu-screen-settings\").classList.toggle(\"hide\");\r\n  document.querySelector(\".main-menu-screen\").classList.toggle(\"hide\");\r\n}\r\n\r\nfunction settingsMenu() {\r\n  document.querySelector(\".main-menu-screen\").classList.toggle(\"hide\");\r\n  document.querySelector(\".menu-screen-settings\").classList.toggle(\"hide\");\r\n}\r\n\r\nfunction startGame() {\r\n  document.querySelector(\".game-screen\").classList.toggle(\"hide\");\r\n  document.querySelector(\".main-menu-screen\").classList.toggle(\"hide\");\r\n  var tamagotchiName = prompt(\"Please, enter a name of your tamagotchi:\", \"\");\r\n  document.querySelector(\"#name\").innerHTML = tamagotchiName;\r\n  if (tamagotchiName == null || tamagotchiName.replace(/\\s/g, \"\") == \"\") {\r\n    tamagotchiName = \"Tamagotchi\";\r\n    document.querySelector(\"#name\").innerHTML = tamagotchiName;\r\n  }\r\n  core();\r\n  let coreUpdate = setInterval(core, 100 * day);\r\n  function core() {\r\n    sleepHpCount = ((tmgch.sleep / maxSleep) * 100).toFixed(2);\r\n    hungerHpCount = ((tmgch.hunger / maxHunger) * 100).toFixed(2);\r\n    playHpCount = ((tmgch.play / maxPlay) * 100).toFixed(2);\r\n    energyHpCount = ((tmgch.play / maxPlay) * 100).toFixed(2);\r\n    skillLevelHpCount = ((tmgch.play / maxPlay) * 100).toFixed(2);\r\n\r\n    score++;\r\n    scoreBar.innerHTML = score;\r\n\r\n    if (tmgch.sleep >= maxSleep + (maxSleep / 100) * 20) {\r\n      tmgch.sleep = maxSleep + (maxSleep / 100) * 20;\r\n    }\r\n\r\n    if (tmgch.hunger >= maxHunger + (maxHunger / 100) * 20) {\r\n      tmgch.hunger = maxHunger + (maxHunger / 100) * 20;\r\n    }\r\n\r\n    if (tmgch.play >= maxPlay + (maxPlay / 100) * 20) {\r\n      tmgch.play = maxPlay + (maxPlay / 100) * 20;\r\n    }\r\n    if (tmgch.energy >= maxEnergy + (maxEnergy / 100) * 20) {\r\n      tmgch.energy = maxEnergy + (maxEnergy / 100) * 20;\r\n    }\r\n    if (tmgch.skillLevel >= maxSkillLevel + (maxSkillLevel / 100) * 20) {\r\n      tmgch.skillLevel = maxSkillLevel + (maxSkillLevel / 100) * 20;\r\n    }\r\n    if (tmgch.energy >= maxEnergy + (maxEnergy / 100) * 20) {\r\n      tmgch.energy = maxEnergy + (maxEnergy / 100) * 20;\r\n    }\r\n\r\n    if ((tmgch.sleep / maxSleep) * 100 > 100) {\r\n      sleepHpCount = 100;\r\n    }\r\n    if ((tmgch.hunger / maxHunger) * 100 > 100) {\r\n      hungerHpCount = 100;\r\n    }\r\n    if ((tmgch.play / maxPlay) * 100 > 100) {\r\n      playHpCount = 100;\r\n    }\r\n    if ((tmgch.energy / maxEnergy) * 100 > 100) {\r\n      energyHpCount = 100;\r\n    }\r\n    if ((tmgch.skillLevel / maxSkillLevel) * 100 > 100) {\r\n      skillLevelHpCount = 100;\r\n    }\r\n\r\n    sleepHp.innerHTML = sleepHpCount;\r\n    hungerHp.innerHTML = hungerHpCount;\r\n    playHp.innerHTML = playHpCount;\r\n    energyHp.innerHTML = energyHpCount;\r\n    skillLevelHp.innerHTML = skillLevelHpCount;\r\n\r\n    tmgch.tick();\r\n    var petimage = [\"1.gif\", \"happy.gif\", \"sad.gif\", \"dead.gif\"];\r\n    const container = document.getElementById(\"t-body\");\r\n    if (sleepHpCount <= 50) {\r\n      document.getElementById(\"petimage\").src = \"sad.gif\";\r\n    } else if (sleepHpCount >= 80) {\r\n      document.getElementById(\"petimage\").src = \"happy.gif\";\r\n    } else {\r\n      document.getElementById(\"petimage\").src = \"1.gif\";\r\n    }\r\n\r\n    if (hungerHpCount <= 50) {\r\n      document.getElementById(\"petimage\").src = \"sad.gif\";\r\n    } else if (hungerHpCount >= 80) {\r\n      document.getElementById(\"petimage\").src = \"happy.gif\";\r\n    } else {\r\n      document.getElementById(\"petimage\").src = \"1.gif\";\r\n    }\r\n\r\n    if (playHpCount <= 50) {\r\n      document.getElementById(\"petimage\").src = \"sad.gif\";\r\n    } else if (playHpCount >= 80) {\r\n      document.getElementById(\"petimage\").src = \"happy.gif\";\r\n    } else {\r\n      document.getElementById(\"petimage\").src = \"1.gif\";\r\n    }\r\n    if (playHpCount <= 0 || sleepHpCount <= 0 || hungerHpCount <= 0) {\r\n      playHpCount = 0;\r\n      sleepHpCount = 0;\r\n      hungerHpCount = 0;\r\n      skillLevelHpCount = 0;\r\n      energyHpCount = 0;\r\n      clearInterval(coreUpdate);\r\n      document.getElementById(\"petimage\").src = \"dead.gif\";\r\n      alert(\"Your score: \" + score);\r\n    }\r\n    const petImageElement = document.getElementById(\"petimage\");\r\n    petImageElement.style.width = \"30%\";\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://tamagochi1/./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;